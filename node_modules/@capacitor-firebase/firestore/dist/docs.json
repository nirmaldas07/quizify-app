{
  "api": {
    "name": "FirebaseFirestorePlugin",
    "slug": "firebasefirestoreplugin",
    "docs": "",
    "tags": [],
    "methods": [
      {
        "name": "addDocument",
        "signature": "(options: AddDocumentOptions) => Promise<AddDocumentResult>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "AddDocumentOptions"
          }
        ],
        "returns": "Promise<AddDocumentResult>",
        "tags": [
          {
            "name": "since",
            "text": "5.2.0"
          }
        ],
        "docs": "Adds a new document to a collection with the given data.",
        "complexTypes": [
          "AddDocumentResult",
          "AddDocumentOptions"
        ],
        "slug": "adddocument"
      },
      {
        "name": "setDocument",
        "signature": "(options: SetDocumentOptions) => Promise<void>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "SetDocumentOptions"
          }
        ],
        "returns": "Promise<void>",
        "tags": [
          {
            "name": "since",
            "text": "5.2.0"
          }
        ],
        "docs": "Writes to the document referred to by the specified reference.\nIf the document does not yet exist, it will be created.",
        "complexTypes": [
          "SetDocumentOptions"
        ],
        "slug": "setdocument"
      },
      {
        "name": "getDocument",
        "signature": "<T extends DocumentData = DocumentData>(options: GetDocumentOptions) => Promise<GetDocumentResult<T>>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "GetDocumentOptions"
          }
        ],
        "returns": "Promise<GetDocumentResult<T>>",
        "tags": [
          {
            "name": "since",
            "text": "5.2.0"
          }
        ],
        "docs": "Reads the document referred to by the specified reference.",
        "complexTypes": [
          "GetDocumentResult",
          "T",
          "DocumentData",
          "GetDocumentOptions"
        ],
        "slug": "getdocument"
      },
      {
        "name": "updateDocument",
        "signature": "(options: UpdateDocumentOptions) => Promise<void>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "UpdateDocumentOptions"
          }
        ],
        "returns": "Promise<void>",
        "tags": [
          {
            "name": "since",
            "text": "5.2.0"
          }
        ],
        "docs": "Updates fields in the document referred to by the specified reference.",
        "complexTypes": [
          "UpdateDocumentOptions"
        ],
        "slug": "updatedocument"
      },
      {
        "name": "deleteDocument",
        "signature": "(options: DeleteDocumentOptions) => Promise<void>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "DeleteDocumentOptions"
          }
        ],
        "returns": "Promise<void>",
        "tags": [
          {
            "name": "since",
            "text": "5.2.0"
          }
        ],
        "docs": "Deletes the document referred to by the specified reference.",
        "complexTypes": [
          "DeleteDocumentOptions"
        ],
        "slug": "deletedocument"
      },
      {
        "name": "writeBatch",
        "signature": "(options: WriteBatchOptions) => Promise<void>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "WriteBatchOptions"
          }
        ],
        "returns": "Promise<void>",
        "tags": [
          {
            "name": "since",
            "text": "6.1.0"
          }
        ],
        "docs": "Execute multiple write operations as a single batch.",
        "complexTypes": [
          "WriteBatchOptions"
        ],
        "slug": "writebatch"
      },
      {
        "name": "getCollection",
        "signature": "<T extends DocumentData = DocumentData>(options: GetCollectionOptions) => Promise<GetCollectionResult<T>>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "GetCollectionOptions"
          }
        ],
        "returns": "Promise<GetCollectionResult<T>>",
        "tags": [
          {
            "name": "since",
            "text": "5.2.0"
          }
        ],
        "docs": "Reads the collection referenced by the specified reference.",
        "complexTypes": [
          "GetCollectionResult",
          "T",
          "DocumentData",
          "GetCollectionOptions"
        ],
        "slug": "getcollection"
      },
      {
        "name": "getCollectionGroup",
        "signature": "<T extends DocumentData = DocumentData>(options: GetCollectionGroupOptions) => Promise<GetCollectionGroupResult<T>>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "GetCollectionGroupOptions"
          }
        ],
        "returns": "Promise<GetCollectionGroupResult<T>>",
        "tags": [],
        "docs": "Reads the collection group referenced by the specified reference.",
        "complexTypes": [
          "GetCollectionGroupResult",
          "T",
          "DocumentData",
          "GetCollectionGroupOptions"
        ],
        "slug": "getcollectiongroup"
      },
      {
        "name": "getCountFromServer",
        "signature": "(options: GetCountFromServerOptions) => Promise<GetCountFromServerResult>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "GetCountFromServerOptions"
          }
        ],
        "returns": "Promise<GetCountFromServerResult>",
        "tags": [
          {
            "name": "since",
            "text": "6.4.0"
          }
        ],
        "docs": "Fetches the number of documents in a collection.",
        "complexTypes": [
          "GetCountFromServerResult",
          "GetCountFromServerOptions"
        ],
        "slug": "getcountfromserver"
      },
      {
        "name": "clearPersistence",
        "signature": "() => Promise<void>",
        "parameters": [],
        "returns": "Promise<void>",
        "tags": [
          {
            "name": "since",
            "text": "5.2.0"
          }
        ],
        "docs": "Clears the persistent storage. This includes pending writes and cached documents.\n\nMust be called after the app is shutdown or when the app is first initialized.",
        "complexTypes": [],
        "slug": "clearpersistence"
      },
      {
        "name": "enableNetwork",
        "signature": "() => Promise<void>",
        "parameters": [],
        "returns": "Promise<void>",
        "tags": [
          {
            "name": "since",
            "text": "5.2.0"
          }
        ],
        "docs": "Re-enables use of the network.",
        "complexTypes": [],
        "slug": "enablenetwork"
      },
      {
        "name": "disableNetwork",
        "signature": "() => Promise<void>",
        "parameters": [],
        "returns": "Promise<void>",
        "tags": [
          {
            "name": "since",
            "text": "5.2.0"
          }
        ],
        "docs": "Disables use of the network.",
        "complexTypes": [],
        "slug": "disablenetwork"
      },
      {
        "name": "useEmulator",
        "signature": "(options: UseEmulatorOptions) => Promise<void>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "UseEmulatorOptions"
          }
        ],
        "returns": "Promise<void>",
        "tags": [
          {
            "name": "since",
            "text": "6.1.0"
          }
        ],
        "docs": "Instrument your app to talk to the Firestore emulator.",
        "complexTypes": [
          "UseEmulatorOptions"
        ],
        "slug": "useemulator"
      },
      {
        "name": "addDocumentSnapshotListener",
        "signature": "<T extends DocumentData = DocumentData>(options: AddDocumentSnapshotListenerOptions, callback: AddDocumentSnapshotListenerCallback<T>) => Promise<CallbackId>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "AddDocumentSnapshotListenerOptions"
          },
          {
            "name": "callback",
            "docs": "",
            "type": "AddDocumentSnapshotListenerCallback<T>"
          }
        ],
        "returns": "Promise<string>",
        "tags": [
          {
            "name": "since",
            "text": "5.2.0"
          }
        ],
        "docs": "Adds a listener for document snapshot events.",
        "complexTypes": [
          "DocumentData",
          "AddDocumentSnapshotListenerOptions",
          "AddDocumentSnapshotListenerCallback",
          "T",
          "CallbackId"
        ],
        "slug": "adddocumentsnapshotlistener"
      },
      {
        "name": "addCollectionSnapshotListener",
        "signature": "<T extends DocumentData = DocumentData>(options: AddCollectionSnapshotListenerOptions, callback: AddCollectionSnapshotListenerCallback<T>) => Promise<CallbackId>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "AddCollectionSnapshotListenerOptions"
          },
          {
            "name": "callback",
            "docs": "",
            "type": "AddCollectionSnapshotListenerCallback<T>"
          }
        ],
        "returns": "Promise<string>",
        "tags": [
          {
            "name": "since",
            "text": "5.2.0"
          }
        ],
        "docs": "Adds a listener for collection snapshot events.",
        "complexTypes": [
          "DocumentData",
          "AddCollectionSnapshotListenerOptions",
          "AddCollectionSnapshotListenerCallback",
          "T",
          "CallbackId"
        ],
        "slug": "addcollectionsnapshotlistener"
      },
      {
        "name": "addCollectionGroupSnapshotListener",
        "signature": "<T extends DocumentData = DocumentData>(options: AddCollectionGroupSnapshotListenerOptions, callback: AddCollectionGroupSnapshotListenerCallback<T>) => Promise<CallbackId>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "AddCollectionGroupSnapshotListenerOptions"
          },
          {
            "name": "callback",
            "docs": "",
            "type": "AddCollectionGroupSnapshotListenerCallback<T>"
          }
        ],
        "returns": "Promise<string>",
        "tags": [
          {
            "name": "since",
            "text": "6.1.0"
          }
        ],
        "docs": "Adds a listener for collection group snapshot events.",
        "complexTypes": [
          "DocumentData",
          "AddCollectionGroupSnapshotListenerOptions",
          "AddCollectionGroupSnapshotListenerCallback",
          "T",
          "CallbackId"
        ],
        "slug": "addcollectiongroupsnapshotlistener"
      },
      {
        "name": "removeSnapshotListener",
        "signature": "(options: RemoveSnapshotListenerOptions) => Promise<void>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "RemoveSnapshotListenerOptions"
          }
        ],
        "returns": "Promise<void>",
        "tags": [
          {
            "name": "since",
            "text": "5.2.0"
          }
        ],
        "docs": "Remove a listener for document or collection snapshot events.",
        "complexTypes": [
          "RemoveSnapshotListenerOptions"
        ],
        "slug": "removesnapshotlistener"
      },
      {
        "name": "removeAllListeners",
        "signature": "() => Promise<void>",
        "parameters": [],
        "returns": "Promise<void>",
        "tags": [
          {
            "name": "since",
            "text": "5.2.0"
          }
        ],
        "docs": "Remove all listeners for this plugin.",
        "complexTypes": [],
        "slug": "removealllisteners"
      }
    ],
    "properties": []
  },
  "interfaces": [
    {
      "name": "AddDocumentResult",
      "slug": "adddocumentresult",
      "docs": "",
      "tags": [
        {
          "text": "5.2.0",
          "name": "since"
        }
      ],
      "methods": [],
      "properties": [
        {
          "name": "reference",
          "tags": [
            {
              "text": "5.2.0",
              "name": "since"
            }
          ],
          "docs": "The reference of the newly added document.",
          "complexTypes": [
            "DocumentReference"
          ],
          "type": "DocumentReference"
        }
      ]
    },
    {
      "name": "DocumentReference",
      "slug": "documentreference",
      "docs": "",
      "tags": [
        {
          "text": "5.2.0",
          "name": "since"
        }
      ],
      "methods": [],
      "properties": [
        {
          "name": "id",
          "tags": [
            {
              "text": "5.2.0",
              "name": "since"
            },
            {
              "text": "'Aorq09lkt1ynbR7xhTUx'",
              "name": "example"
            }
          ],
          "docs": "The document's identifier within its collection.",
          "complexTypes": [],
          "type": "string"
        },
        {
          "name": "path",
          "tags": [
            {
              "text": "5.2.0",
              "name": "since"
            },
            {
              "text": "'users/Aorq09lkt1ynbR7xhTUx'",
              "name": "example"
            }
          ],
          "docs": "The path of the document.",
          "complexTypes": [],
          "type": "string"
        }
      ]
    },
    {
      "name": "AddDocumentOptions",
      "slug": "adddocumentoptions",
      "docs": "",
      "tags": [
        {
          "text": "5.2.0",
          "name": "since"
        }
      ],
      "methods": [],
      "properties": [
        {
          "name": "reference",
          "tags": [
            {
              "text": "5.2.0",
              "name": "since"
            },
            {
              "text": "'users'",
              "name": "example"
            }
          ],
          "docs": "The reference as a string, with path components separated by a forward slash (`/`).",
          "complexTypes": [],
          "type": "string"
        },
        {
          "name": "data",
          "tags": [
            {
              "text": "5.2.0",
              "name": "since"
            },
            {
              "text": "{ first: 'Alan', last: 'Turing', born: 1912 }",
              "name": "example"
            }
          ],
          "docs": "An object containing the data for the new document.",
          "complexTypes": [
            "DocumentData"
          ],
          "type": "DocumentData"
        }
      ]
    },
    {
      "name": "DocumentData",
      "slug": "documentdata",
      "docs": "",
      "tags": [
        {
          "text": "5.2.0",
          "name": "since"
        }
      ],
      "methods": [],
      "properties": []
    },
    {
      "name": "SetDocumentOptions",
      "slug": "setdocumentoptions",
      "docs": "",
      "tags": [
        {
          "text": "5.2.0",
          "name": "since"
        }
      ],
      "methods": [],
      "properties": [
        {
          "name": "reference",
          "tags": [
            {
              "text": "5.2.0",
              "name": "since"
            },
            {
              "text": "'users/Aorq09lkt1ynbR7xhTUx'",
              "name": "example"
            }
          ],
          "docs": "The reference as a string, with path components separated by a forward slash (`/`).",
          "complexTypes": [],
          "type": "string"
        },
        {
          "name": "data",
          "tags": [
            {
              "text": "5.2.0",
              "name": "since"
            },
            {
              "text": "{ first: 'Alan', last: 'Turing', born: 1912 }",
              "name": "example"
            }
          ],
          "docs": "An object containing the data for the new document.",
          "complexTypes": [
            "DocumentData"
          ],
          "type": "DocumentData"
        },
        {
          "name": "merge",
          "tags": [
            {
              "text": "5.2.0",
              "name": "since"
            },
            {
              "text": "true",
              "name": "example"
            },
            {
              "text": "false",
              "name": "default"
            }
          ],
          "docs": "Whether to merge the provided data with an existing document.",
          "complexTypes": [],
          "type": "boolean | undefined"
        }
      ]
    },
    {
      "name": "GetDocumentResult",
      "slug": "getdocumentresult",
      "docs": "",
      "tags": [
        {
          "text": "5.2.0",
          "name": "since"
        }
      ],
      "methods": [],
      "properties": [
        {
          "name": "snapshot",
          "tags": [
            {
              "text": "5.2.0",
              "name": "since"
            }
          ],
          "docs": "The current document contents.",
          "complexTypes": [
            "DocumentSnapshot",
            "T"
          ],
          "type": "DocumentSnapshot<T>"
        }
      ]
    },
    {
      "name": "DocumentSnapshot",
      "slug": "documentsnapshot",
      "docs": "",
      "tags": [
        {
          "text": "5.2.0",
          "name": "since"
        }
      ],
      "methods": [],
      "properties": [
        {
          "name": "id",
          "tags": [
            {
              "text": "5.2.0",
              "name": "since"
            }
          ],
          "docs": "The document's identifier within its collection.",
          "complexTypes": [],
          "type": "string"
        },
        {
          "name": "path",
          "tags": [
            {
              "text": "5.2.0",
              "name": "since"
            }
          ],
          "docs": "The path of the document.",
          "complexTypes": [],
          "type": "string"
        },
        {
          "name": "data",
          "tags": [
            {
              "text": "5.2.0",
              "name": "since"
            }
          ],
          "docs": "An object containing the data for the document.\n\nReturns `null` if the document doesn't exist.",
          "complexTypes": [
            "T"
          ],
          "type": "T | null"
        },
        {
          "name": "metadata",
          "tags": [
            {
              "text": "6.2.0",
              "name": "since"
            }
          ],
          "docs": "Metadata about the snapshot, concerning its source and if it has local modifications.",
          "complexTypes": [
            "SnapshotMetadata"
          ],
          "type": "SnapshotMetadata"
        }
      ]
    },
    {
      "name": "SnapshotMetadata",
      "slug": "snapshotmetadata",
      "docs": "",
      "tags": [
        {
          "text": "6.2.0",
          "name": "since"
        }
      ],
      "methods": [],
      "properties": [
        {
          "name": "fromCache",
          "tags": [
            {
              "text": "6.2.0",
              "name": "since"
            }
          ],
          "docs": "True if the snapshot was created from cached data.",
          "complexTypes": [],
          "type": "boolean"
        },
        {
          "name": "hasPendingWrites",
          "tags": [
            {
              "text": "6.2.0",
              "name": "since"
            }
          ],
          "docs": "True if the snapshot was created from pending write data.",
          "complexTypes": [],
          "type": "boolean"
        }
      ]
    },
    {
      "name": "GetDocumentOptions",
      "slug": "getdocumentoptions",
      "docs": "",
      "tags": [
        {
          "text": "5.2.0",
          "name": "since"
        }
      ],
      "methods": [],
      "properties": [
        {
          "name": "reference",
          "tags": [
            {
              "text": "5.2.0",
              "name": "since"
            }
          ],
          "docs": "The reference as a string, with path components separated by a forward slash (`/`).",
          "complexTypes": [],
          "type": "string"
        }
      ]
    },
    {
      "name": "UpdateDocumentOptions",
      "slug": "updatedocumentoptions",
      "docs": "",
      "tags": [
        {
          "text": "5.2.0",
          "name": "since"
        }
      ],
      "methods": [],
      "properties": [
        {
          "name": "reference",
          "tags": [
            {
              "text": "5.2.0",
              "name": "since"
            }
          ],
          "docs": "The reference as a string, with path components separated by a forward slash (`/`).",
          "complexTypes": [],
          "type": "string"
        },
        {
          "name": "data",
          "tags": [
            {
              "text": "5.2.0",
              "name": "since"
            },
            {
              "text": "{ first: 'Alan', last: 'Turing', born: 1912 }",
              "name": "example"
            }
          ],
          "docs": "An object containing the data for the new document.",
          "complexTypes": [
            "DocumentData"
          ],
          "type": "DocumentData"
        }
      ]
    },
    {
      "name": "DeleteDocumentOptions",
      "slug": "deletedocumentoptions",
      "docs": "",
      "tags": [
        {
          "text": "5.2.0",
          "name": "since"
        }
      ],
      "methods": [],
      "properties": [
        {
          "name": "reference",
          "tags": [
            {
              "text": "5.2.0",
              "name": "since"
            }
          ],
          "docs": "The reference as a string, with path components separated by a forward slash (`/`).",
          "complexTypes": [],
          "type": "string"
        }
      ]
    },
    {
      "name": "WriteBatchOptions",
      "slug": "writebatchoptions",
      "docs": "",
      "tags": [
        {
          "text": "6.1.0",
          "name": "since"
        }
      ],
      "methods": [],
      "properties": [
        {
          "name": "operations",
          "tags": [
            {
              "text": "6.1.0",
              "name": "since"
            }
          ],
          "docs": "The operations to execute in the batch.",
          "complexTypes": [
            "WriteBatchOperation"
          ],
          "type": "WriteBatchOperation[]"
        }
      ]
    },
    {
      "name": "WriteBatchOperation",
      "slug": "writebatchoperation",
      "docs": "",
      "tags": [
        {
          "text": "6.1.0",
          "name": "since"
        }
      ],
      "methods": [],
      "properties": [
        {
          "name": "type",
          "tags": [
            {
              "text": "6.1.0",
              "name": "since"
            }
          ],
          "docs": "The type of operation.",
          "complexTypes": [],
          "type": "'set' | 'update' | 'delete'"
        },
        {
          "name": "reference",
          "tags": [
            {
              "text": "6.1.0",
              "name": "since"
            }
          ],
          "docs": "The reference as a string, with path components separated by a forward slash (`/`).",
          "complexTypes": [],
          "type": "string"
        },
        {
          "name": "data",
          "tags": [
            {
              "text": "6.1.0",
              "name": "since"
            }
          ],
          "docs": "An object containing the data for the new document.",
          "complexTypes": [
            "DocumentData"
          ],
          "type": "DocumentData"
        },
        {
          "name": "options",
          "tags": [
            {
              "text": "7.3.0",
              "name": "since"
            }
          ],
          "docs": "An object to configure the set behavior.",
          "complexTypes": [
            "SetOptions"
          ],
          "type": "SetOptions"
        }
      ]
    },
    {
      "name": "SetOptions",
      "slug": "setoptions",
      "docs": "",
      "tags": [
        {
          "text": "7.3.0",
          "name": "since"
        }
      ],
      "methods": [],
      "properties": [
        {
          "name": "merge",
          "tags": [
            {
              "text": "7.3.0",
              "name": "since"
            },
            {
              "text": "false",
              "name": "default"
            }
          ],
          "docs": "Whether a merge should be performed or the document should be overwritten.",
          "complexTypes": [],
          "type": "boolean | undefined"
        }
      ]
    },
    {
      "name": "Array",
      "slug": "array",
      "docs": "",
      "tags": [],
      "methods": [
        {
          "name": "toString",
          "signature": "() => string",
          "parameters": [],
          "returns": "string",
          "tags": [],
          "docs": "Returns a string representation of an array.",
          "complexTypes": [],
          "slug": "tostring"
        },
        {
          "name": "toLocaleString",
          "signature": "() => string",
          "parameters": [],
          "returns": "string",
          "tags": [],
          "docs": "Returns a string representation of an array. The elements are converted to string using their toLocalString methods.",
          "complexTypes": [],
          "slug": "tolocalestring"
        },
        {
          "name": "pop",
          "signature": "() => T | undefined",
          "parameters": [],
          "returns": "T | undefined",
          "tags": [],
          "docs": "Removes the last element from an array and returns it.\r\nIf the array is empty, undefined is returned and the array is not modified.",
          "complexTypes": [
            "T"
          ],
          "slug": "pop"
        },
        {
          "name": "push",
          "signature": "(...items: T[]) => number",
          "parameters": [
            {
              "name": "items",
              "docs": "New elements to add to the array.",
              "type": "T[]"
            }
          ],
          "returns": "number",
          "tags": [
            {
              "name": "param",
              "text": "items New elements to add to the array."
            }
          ],
          "docs": "Appends new elements to the end of an array, and returns the new length of the array.",
          "complexTypes": [
            "T"
          ],
          "slug": "push"
        },
        {
          "name": "concat",
          "signature": "(...items: ConcatArray<T>[]) => T[]",
          "parameters": [
            {
              "name": "items",
              "docs": "Additional arrays and/or items to add to the end of the array.",
              "type": "ConcatArray<T>[]"
            }
          ],
          "returns": "T[]",
          "tags": [
            {
              "name": "param",
              "text": "items Additional arrays and/or items to add to the end of the array."
            }
          ],
          "docs": "Combines two or more arrays.\r\nThis method returns a new array without modifying any existing arrays.",
          "complexTypes": [
            "T",
            "ConcatArray"
          ],
          "slug": "concat"
        },
        {
          "name": "concat",
          "signature": "(...items: (T | ConcatArray<T>)[]) => T[]",
          "parameters": [
            {
              "name": "items",
              "docs": "Additional arrays and/or items to add to the end of the array.",
              "type": "(T | ConcatArray<T>)[]"
            }
          ],
          "returns": "T[]",
          "tags": [
            {
              "name": "param",
              "text": "items Additional arrays and/or items to add to the end of the array."
            }
          ],
          "docs": "Combines two or more arrays.\r\nThis method returns a new array without modifying any existing arrays.",
          "complexTypes": [
            "T",
            "ConcatArray"
          ],
          "slug": "concat"
        },
        {
          "name": "join",
          "signature": "(separator?: string | undefined) => string",
          "parameters": [
            {
              "name": "separator",
              "docs": "A string used to separate one element of the array from the next in the resulting string. If omitted, the array elements are separated with a comma.",
              "type": "string | undefined"
            }
          ],
          "returns": "string",
          "tags": [
            {
              "name": "param",
              "text": "separator A string used to separate one element of the array from the next in the resulting string. If omitted, the array elements are separated with a comma."
            }
          ],
          "docs": "Adds all the elements of an array into a string, separated by the specified separator string.",
          "complexTypes": [],
          "slug": "join"
        },
        {
          "name": "reverse",
          "signature": "() => T[]",
          "parameters": [],
          "returns": "T[]",
          "tags": [],
          "docs": "Reverses the elements in an array in place.\r\nThis method mutates the array and returns a reference to the same array.",
          "complexTypes": [
            "T"
          ],
          "slug": "reverse"
        },
        {
          "name": "shift",
          "signature": "() => T | undefined",
          "parameters": [],
          "returns": "T | undefined",
          "tags": [],
          "docs": "Removes the first element from an array and returns it.\r\nIf the array is empty, undefined is returned and the array is not modified.",
          "complexTypes": [
            "T"
          ],
          "slug": "shift"
        },
        {
          "name": "slice",
          "signature": "(start?: number | undefined, end?: number | undefined) => T[]",
          "parameters": [
            {
              "name": "start",
              "docs": "The beginning index of the specified portion of the array.\r\nIf start is undefined, then the slice begins at index 0.",
              "type": "number | undefined"
            },
            {
              "name": "end",
              "docs": "The end index of the specified portion of the array. This is exclusive of the element at the index 'end'.\r\nIf end is undefined, then the slice extends to the end of the array.",
              "type": "number | undefined"
            }
          ],
          "returns": "T[]",
          "tags": [
            {
              "name": "param",
              "text": "start The beginning index of the specified portion of the array.\r\nIf start is undefined, then the slice begins at index 0."
            },
            {
              "name": "param",
              "text": "end The end index of the specified portion of the array. This is exclusive of the element at the index 'end'.\r\nIf end is undefined, then the slice extends to the end of the array."
            }
          ],
          "docs": "Returns a copy of a section of an array.\r\nFor both start and end, a negative index can be used to indicate an offset from the end of the array.\r\nFor example, -2 refers to the second to last element of the array.",
          "complexTypes": [
            "T"
          ],
          "slug": "slice"
        },
        {
          "name": "sort",
          "signature": "(compareFn?: ((a: T, b: T) => number) | undefined) => this",
          "parameters": [
            {
              "name": "compareFn",
              "docs": "Function used to determine the order of the elements. It is expected to return\r\na negative value if first argument is less than second argument, zero if they're equal and a positive\r\nvalue otherwise. If omitted, the elements are sorted in ascending, ASCII character order.\r\n```ts\r\n[11,2,22,1].sort((a, b) => a - b)\r\n```",
              "type": "((a: T, b: T) => number) | undefined"
            }
          ],
          "returns": "this",
          "tags": [
            {
              "name": "param",
              "text": "compareFn Function used to determine the order of the elements. It is expected to return\r\na negative value if first argument is less than second argument, zero if they're equal and a positive\r\nvalue otherwise. If omitted, the elements are sorted in ascending, ASCII character order.\r\n```ts\r\n[11,2,22,1].sort((a, b) => a - b)\r\n```"
            }
          ],
          "docs": "Sorts an array in place.\r\nThis method mutates the array and returns a reference to the same array.",
          "complexTypes": [
            "T"
          ],
          "slug": "sort"
        },
        {
          "name": "splice",
          "signature": "(start: number, deleteCount?: number | undefined) => T[]",
          "parameters": [
            {
              "name": "start",
              "docs": "The zero-based location in the array from which to start removing elements.",
              "type": "number"
            },
            {
              "name": "deleteCount",
              "docs": "The number of elements to remove.",
              "type": "number | undefined"
            }
          ],
          "returns": "T[]",
          "tags": [
            {
              "name": "param",
              "text": "start The zero-based location in the array from which to start removing elements."
            },
            {
              "name": "param",
              "text": "deleteCount The number of elements to remove."
            },
            {
              "name": "returns",
              "text": "An array containing the elements that were deleted."
            }
          ],
          "docs": "Removes elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.",
          "complexTypes": [
            "T"
          ],
          "slug": "splice"
        },
        {
          "name": "splice",
          "signature": "(start: number, deleteCount: number, ...items: T[]) => T[]",
          "parameters": [
            {
              "name": "start",
              "docs": "The zero-based location in the array from which to start removing elements.",
              "type": "number"
            },
            {
              "name": "deleteCount",
              "docs": "The number of elements to remove.",
              "type": "number"
            },
            {
              "name": "items",
              "docs": "Elements to insert into the array in place of the deleted elements.",
              "type": "T[]"
            }
          ],
          "returns": "T[]",
          "tags": [
            {
              "name": "param",
              "text": "start The zero-based location in the array from which to start removing elements."
            },
            {
              "name": "param",
              "text": "deleteCount The number of elements to remove."
            },
            {
              "name": "param",
              "text": "items Elements to insert into the array in place of the deleted elements."
            },
            {
              "name": "returns",
              "text": "An array containing the elements that were deleted."
            }
          ],
          "docs": "Removes elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.",
          "complexTypes": [
            "T"
          ],
          "slug": "splice"
        },
        {
          "name": "unshift",
          "signature": "(...items: T[]) => number",
          "parameters": [
            {
              "name": "items",
              "docs": "Elements to insert at the start of the array.",
              "type": "T[]"
            }
          ],
          "returns": "number",
          "tags": [
            {
              "name": "param",
              "text": "items Elements to insert at the start of the array."
            }
          ],
          "docs": "Inserts new elements at the start of an array, and returns the new length of the array.",
          "complexTypes": [
            "T"
          ],
          "slug": "unshift"
        },
        {
          "name": "indexOf",
          "signature": "(searchElement: T, fromIndex?: number | undefined) => number",
          "parameters": [
            {
              "name": "searchElement",
              "docs": "The value to locate in the array.",
              "type": "T"
            },
            {
              "name": "fromIndex",
              "docs": "The array index at which to begin the search. If fromIndex is omitted, the search starts at index 0.",
              "type": "number | undefined"
            }
          ],
          "returns": "number",
          "tags": [
            {
              "name": "param",
              "text": "searchElement The value to locate in the array."
            },
            {
              "name": "param",
              "text": "fromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at index 0."
            }
          ],
          "docs": "Returns the index of the first occurrence of a value in an array, or -1 if it is not present.",
          "complexTypes": [
            "T"
          ],
          "slug": "indexof"
        },
        {
          "name": "lastIndexOf",
          "signature": "(searchElement: T, fromIndex?: number | undefined) => number",
          "parameters": [
            {
              "name": "searchElement",
              "docs": "The value to locate in the array.",
              "type": "T"
            },
            {
              "name": "fromIndex",
              "docs": "The array index at which to begin searching backward. If fromIndex is omitted, the search starts at the last index in the array.",
              "type": "number | undefined"
            }
          ],
          "returns": "number",
          "tags": [
            {
              "name": "param",
              "text": "searchElement The value to locate in the array."
            },
            {
              "name": "param",
              "text": "fromIndex The array index at which to begin searching backward. If fromIndex is omitted, the search starts at the last index in the array."
            }
          ],
          "docs": "Returns the index of the last occurrence of a specified value in an array, or -1 if it is not present.",
          "complexTypes": [
            "T"
          ],
          "slug": "lastindexof"
        },
        {
          "name": "every",
          "signature": "<S extends T>(predicate: (value: T, index: number, array: T[]) => value is S, thisArg?: any) => this is S[]",
          "parameters": [
            {
              "name": "predicate",
              "docs": "A function that accepts up to three arguments. The every method calls\r\nthe predicate function for each element in the array until the predicate returns a value\r\nwhich is coercible to the Boolean value false, or until the end of the array.",
              "type": "(value: T, index: number, array: T[]) => value is S"
            },
            {
              "name": "thisArg",
              "docs": "An object to which the this keyword can refer in the predicate function.\r\nIf thisArg is omitted, undefined is used as the this value.",
              "type": "any"
            }
          ],
          "returns": "boolean",
          "tags": [
            {
              "name": "param",
              "text": "predicate A function that accepts up to three arguments. The every method calls\r\nthe predicate function for each element in the array until the predicate returns a value\r\nwhich is coercible to the Boolean value false, or until the end of the array."
            },
            {
              "name": "param",
              "text": "thisArg An object to which the this keyword can refer in the predicate function.\r\nIf thisArg is omitted, undefined is used as the this value."
            }
          ],
          "docs": "Determines whether all the members of an array satisfy the specified test.",
          "complexTypes": [
            "T",
            "S"
          ],
          "slug": "every"
        },
        {
          "name": "every",
          "signature": "(predicate: (value: T, index: number, array: T[]) => unknown, thisArg?: any) => boolean",
          "parameters": [
            {
              "name": "predicate",
              "docs": "A function that accepts up to three arguments. The every method calls\r\nthe predicate function for each element in the array until the predicate returns a value\r\nwhich is coercible to the Boolean value false, or until the end of the array.",
              "type": "(value: T, index: number, array: T[]) => unknown"
            },
            {
              "name": "thisArg",
              "docs": "An object to which the this keyword can refer in the predicate function.\r\nIf thisArg is omitted, undefined is used as the this value.",
              "type": "any"
            }
          ],
          "returns": "boolean",
          "tags": [
            {
              "name": "param",
              "text": "predicate A function that accepts up to three arguments. The every method calls\r\nthe predicate function for each element in the array until the predicate returns a value\r\nwhich is coercible to the Boolean value false, or until the end of the array."
            },
            {
              "name": "param",
              "text": "thisArg An object to which the this keyword can refer in the predicate function.\r\nIf thisArg is omitted, undefined is used as the this value."
            }
          ],
          "docs": "Determines whether all the members of an array satisfy the specified test.",
          "complexTypes": [
            "T"
          ],
          "slug": "every"
        },
        {
          "name": "some",
          "signature": "(predicate: (value: T, index: number, array: T[]) => unknown, thisArg?: any) => boolean",
          "parameters": [
            {
              "name": "predicate",
              "docs": "A function that accepts up to three arguments. The some method calls\r\nthe predicate function for each element in the array until the predicate returns a value\r\nwhich is coercible to the Boolean value true, or until the end of the array.",
              "type": "(value: T, index: number, array: T[]) => unknown"
            },
            {
              "name": "thisArg",
              "docs": "An object to which the this keyword can refer in the predicate function.\r\nIf thisArg is omitted, undefined is used as the this value.",
              "type": "any"
            }
          ],
          "returns": "boolean",
          "tags": [
            {
              "name": "param",
              "text": "predicate A function that accepts up to three arguments. The some method calls\r\nthe predicate function for each element in the array until the predicate returns a value\r\nwhich is coercible to the Boolean value true, or until the end of the array."
            },
            {
              "name": "param",
              "text": "thisArg An object to which the this keyword can refer in the predicate function.\r\nIf thisArg is omitted, undefined is used as the this value."
            }
          ],
          "docs": "Determines whether the specified callback function returns true for any element of an array.",
          "complexTypes": [
            "T"
          ],
          "slug": "some"
        },
        {
          "name": "forEach",
          "signature": "(callbackfn: (value: T, index: number, array: T[]) => void, thisArg?: any) => void",
          "parameters": [
            {
              "name": "callbackfn",
              "docs": "A function that accepts up to three arguments. forEach calls the callbackfn function one time for each element in the array.",
              "type": "(value: T, index: number, array: T[]) => void"
            },
            {
              "name": "thisArg",
              "docs": "An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.",
              "type": "any"
            }
          ],
          "returns": "void",
          "tags": [
            {
              "name": "param",
              "text": "callbackfn A function that accepts up to three arguments. forEach calls the callbackfn function one time for each element in the array."
            },
            {
              "name": "param",
              "text": "thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value."
            }
          ],
          "docs": "Performs the specified action for each element in an array.",
          "complexTypes": [
            "T"
          ],
          "slug": "foreach"
        },
        {
          "name": "map",
          "signature": "<U>(callbackfn: (value: T, index: number, array: T[]) => U, thisArg?: any) => U[]",
          "parameters": [
            {
              "name": "callbackfn",
              "docs": "A function that accepts up to three arguments. The map method calls the callbackfn function one time for each element in the array.",
              "type": "(value: T, index: number, array: T[]) => U"
            },
            {
              "name": "thisArg",
              "docs": "An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.",
              "type": "any"
            }
          ],
          "returns": "U[]",
          "tags": [
            {
              "name": "param",
              "text": "callbackfn A function that accepts up to three arguments. The map method calls the callbackfn function one time for each element in the array."
            },
            {
              "name": "param",
              "text": "thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value."
            }
          ],
          "docs": "Calls a defined callback function on each element of an array, and returns an array that contains the results.",
          "complexTypes": [
            "U",
            "T"
          ],
          "slug": "map"
        },
        {
          "name": "filter",
          "signature": "<S extends T>(predicate: (value: T, index: number, array: T[]) => value is S, thisArg?: any) => S[]",
          "parameters": [
            {
              "name": "predicate",
              "docs": "A function that accepts up to three arguments. The filter method calls the predicate function one time for each element in the array.",
              "type": "(value: T, index: number, array: T[]) => value is S"
            },
            {
              "name": "thisArg",
              "docs": "An object to which the this keyword can refer in the predicate function. If thisArg is omitted, undefined is used as the this value.",
              "type": "any"
            }
          ],
          "returns": "S[]",
          "tags": [
            {
              "name": "param",
              "text": "predicate A function that accepts up to three arguments. The filter method calls the predicate function one time for each element in the array."
            },
            {
              "name": "param",
              "text": "thisArg An object to which the this keyword can refer in the predicate function. If thisArg is omitted, undefined is used as the this value."
            }
          ],
          "docs": "Returns the elements of an array that meet the condition specified in a callback function.",
          "complexTypes": [
            "S",
            "T"
          ],
          "slug": "filter"
        },
        {
          "name": "filter",
          "signature": "(predicate: (value: T, index: number, array: T[]) => unknown, thisArg?: any) => T[]",
          "parameters": [
            {
              "name": "predicate",
              "docs": "A function that accepts up to three arguments. The filter method calls the predicate function one time for each element in the array.",
              "type": "(value: T, index: number, array: T[]) => unknown"
            },
            {
              "name": "thisArg",
              "docs": "An object to which the this keyword can refer in the predicate function. If thisArg is omitted, undefined is used as the this value.",
              "type": "any"
            }
          ],
          "returns": "T[]",
          "tags": [
            {
              "name": "param",
              "text": "predicate A function that accepts up to three arguments. The filter method calls the predicate function one time for each element in the array."
            },
            {
              "name": "param",
              "text": "thisArg An object to which the this keyword can refer in the predicate function. If thisArg is omitted, undefined is used as the this value."
            }
          ],
          "docs": "Returns the elements of an array that meet the condition specified in a callback function.",
          "complexTypes": [
            "T"
          ],
          "slug": "filter"
        },
        {
          "name": "reduce",
          "signature": "(callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: T[]) => T) => T",
          "parameters": [
            {
              "name": "callbackfn",
              "docs": "A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.",
              "type": "(previousValue: T, currentValue: T, currentIndex: number, array: T[]) => T"
            }
          ],
          "returns": "T",
          "tags": [
            {
              "name": "param",
              "text": "callbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array."
            },
            {
              "name": "param",
              "text": "initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value."
            }
          ],
          "docs": "Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.",
          "complexTypes": [
            "T"
          ],
          "slug": "reduce"
        },
        {
          "name": "reduce",
          "signature": "(callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: T[]) => T, initialValue: T) => T",
          "parameters": [
            {
              "name": "callbackfn",
              "docs": "",
              "type": "(previousValue: T, currentValue: T, currentIndex: number, array: T[]) => T"
            },
            {
              "name": "initialValue",
              "docs": "",
              "type": "T"
            }
          ],
          "returns": "T",
          "tags": [],
          "docs": "",
          "complexTypes": [
            "T"
          ],
          "slug": "reduce"
        },
        {
          "name": "reduce",
          "signature": "<U>(callbackfn: (previousValue: U, currentValue: T, currentIndex: number, array: T[]) => U, initialValue: U) => U",
          "parameters": [
            {
              "name": "callbackfn",
              "docs": "A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.",
              "type": "(previousValue: U, currentValue: T, currentIndex: number, array: T[]) => U"
            },
            {
              "name": "initialValue",
              "docs": "If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.",
              "type": "U"
            }
          ],
          "returns": "U",
          "tags": [
            {
              "name": "param",
              "text": "callbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array."
            },
            {
              "name": "param",
              "text": "initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value."
            }
          ],
          "docs": "Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.",
          "complexTypes": [
            "U",
            "T"
          ],
          "slug": "reduce"
        },
        {
          "name": "reduceRight",
          "signature": "(callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: T[]) => T) => T",
          "parameters": [
            {
              "name": "callbackfn",
              "docs": "A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array.",
              "type": "(previousValue: T, currentValue: T, currentIndex: number, array: T[]) => T"
            }
          ],
          "returns": "T",
          "tags": [
            {
              "name": "param",
              "text": "callbackfn A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array."
            },
            {
              "name": "param",
              "text": "initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value."
            }
          ],
          "docs": "Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.",
          "complexTypes": [
            "T"
          ],
          "slug": "reduceright"
        },
        {
          "name": "reduceRight",
          "signature": "(callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: T[]) => T, initialValue: T) => T",
          "parameters": [
            {
              "name": "callbackfn",
              "docs": "",
              "type": "(previousValue: T, currentValue: T, currentIndex: number, array: T[]) => T"
            },
            {
              "name": "initialValue",
              "docs": "",
              "type": "T"
            }
          ],
          "returns": "T",
          "tags": [],
          "docs": "",
          "complexTypes": [
            "T"
          ],
          "slug": "reduceright"
        },
        {
          "name": "reduceRight",
          "signature": "<U>(callbackfn: (previousValue: U, currentValue: T, currentIndex: number, array: T[]) => U, initialValue: U) => U",
          "parameters": [
            {
              "name": "callbackfn",
              "docs": "A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array.",
              "type": "(previousValue: U, currentValue: T, currentIndex: number, array: T[]) => U"
            },
            {
              "name": "initialValue",
              "docs": "If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.",
              "type": "U"
            }
          ],
          "returns": "U",
          "tags": [
            {
              "name": "param",
              "text": "callbackfn A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array."
            },
            {
              "name": "param",
              "text": "initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value."
            }
          ],
          "docs": "Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.",
          "complexTypes": [
            "U",
            "T"
          ],
          "slug": "reduceright"
        }
      ],
      "properties": [
        {
          "name": "length",
          "tags": [],
          "docs": "Gets or sets the length of the array. This is a number one higher than the highest index in the array.",
          "complexTypes": [],
          "type": "number"
        }
      ]
    },
    {
      "name": "ConcatArray",
      "slug": "concatarray",
      "docs": "",
      "tags": [],
      "methods": [
        {
          "name": "join",
          "signature": "(separator?: string | undefined) => string",
          "parameters": [
            {
              "name": "separator",
              "docs": "",
              "type": "string | undefined"
            }
          ],
          "returns": "string",
          "tags": [],
          "docs": "",
          "complexTypes": [],
          "slug": "join"
        },
        {
          "name": "slice",
          "signature": "(start?: number | undefined, end?: number | undefined) => T[]",
          "parameters": [
            {
              "name": "start",
              "docs": "",
              "type": "number | undefined"
            },
            {
              "name": "end",
              "docs": "",
              "type": "number | undefined"
            }
          ],
          "returns": "T[]",
          "tags": [],
          "docs": "",
          "complexTypes": [
            "T"
          ],
          "slug": "slice"
        }
      ],
      "properties": [
        {
          "name": "length",
          "tags": [],
          "docs": "",
          "complexTypes": [],
          "type": "number"
        }
      ]
    },
    {
      "name": "GetCollectionResult",
      "slug": "getcollectionresult",
      "docs": "",
      "tags": [
        {
          "text": "5.2.0",
          "name": "since"
        }
      ],
      "methods": [],
      "properties": [
        {
          "name": "snapshots",
          "tags": [
            {
              "text": "5.2.0",
              "name": "since"
            }
          ],
          "docs": "The documents in the collection.",
          "complexTypes": [
            "DocumentSnapshot",
            "T"
          ],
          "type": "DocumentSnapshot<T>[]"
        }
      ]
    },
    {
      "name": "GetCollectionOptions",
      "slug": "getcollectionoptions",
      "docs": "",
      "tags": [
        {
          "text": "5.2.0",
          "name": "since"
        }
      ],
      "methods": [],
      "properties": [
        {
          "name": "reference",
          "tags": [
            {
              "text": "5.2.0",
              "name": "since"
            }
          ],
          "docs": "The reference as a string, with path components separated by a forward slash (`/`).",
          "complexTypes": [],
          "type": "string"
        },
        {
          "name": "compositeFilter",
          "tags": [
            {
              "text": "5.2.0",
              "name": "since"
            }
          ],
          "docs": "The filter to apply.",
          "complexTypes": [
            "QueryCompositeFilterConstraint"
          ],
          "type": "QueryCompositeFilterConstraint"
        },
        {
          "name": "queryConstraints",
          "tags": [
            {
              "text": "5.2.0",
              "name": "since"
            }
          ],
          "docs": "Narrow or order the set of documents to retrieve, but do not explicitly filter for document fields.",
          "complexTypes": [
            "QueryNonFilterConstraint"
          ],
          "type": "QueryNonFilterConstraint[] | undefined"
        }
      ]
    },
    {
      "name": "QueryCompositeFilterConstraint",
      "slug": "querycompositefilterconstraint",
      "docs": "",
      "tags": [
        {
          "text": "5.2.0",
          "name": "since"
        }
      ],
      "methods": [],
      "properties": [
        {
          "name": "type",
          "tags": [
            {
              "text": "5.2.0",
              "name": "since"
            }
          ],
          "docs": "The type of the constraint.",
          "complexTypes": [],
          "type": "'and' | 'or'"
        },
        {
          "name": "queryConstraints",
          "tags": [
            {
              "text": "5.2.0",
              "name": "since"
            }
          ],
          "docs": "The filters to apply.",
          "complexTypes": [
            "QueryFilterConstraint"
          ],
          "type": "QueryFilterConstraint[]"
        }
      ]
    },
    {
      "name": "QueryFieldFilterConstraint",
      "slug": "queryfieldfilterconstraint",
      "docs": "",
      "tags": [
        {
          "text": "5.2.0",
          "name": "since"
        }
      ],
      "methods": [],
      "properties": [
        {
          "name": "type",
          "tags": [
            {
              "text": "5.2.0",
              "name": "since"
            }
          ],
          "docs": "The type of the constraint.",
          "complexTypes": [],
          "type": "'where'"
        },
        {
          "name": "fieldPath",
          "tags": [
            {
              "text": "5.2.0",
              "name": "since"
            }
          ],
          "docs": "The path to compare.",
          "complexTypes": [],
          "type": "string"
        },
        {
          "name": "opStr",
          "tags": [
            {
              "text": "5.2.0",
              "name": "since"
            }
          ],
          "docs": "The operation string to apply.",
          "complexTypes": [
            "QueryOperator"
          ],
          "type": "QueryOperator"
        },
        {
          "name": "value",
          "tags": [
            {
              "text": "5.2.0",
              "name": "since"
            }
          ],
          "docs": "The value for comparison.",
          "complexTypes": [],
          "type": "any"
        }
      ]
    },
    {
      "name": "QueryOrderByConstraint",
      "slug": "queryorderbyconstraint",
      "docs": "",
      "tags": [
        {
          "text": "5.2.0",
          "name": "since"
        }
      ],
      "methods": [],
      "properties": [
        {
          "name": "type",
          "tags": [
            {
              "text": "5.2.0",
              "name": "since"
            }
          ],
          "docs": "The type of the constraint.",
          "complexTypes": [],
          "type": "'orderBy'"
        },
        {
          "name": "fieldPath",
          "tags": [
            {
              "text": "5.2.0",
              "name": "since"
            }
          ],
          "docs": "The path to compare.",
          "complexTypes": [],
          "type": "string"
        },
        {
          "name": "directionStr",
          "tags": [
            {
              "text": "5.2.0",
              "name": "since"
            }
          ],
          "docs": "The direction to sort by.",
          "complexTypes": [
            "OrderByDirection"
          ],
          "type": "OrderByDirection"
        }
      ]
    },
    {
      "name": "QueryLimitConstraint",
      "slug": "querylimitconstraint",
      "docs": "",
      "tags": [
        {
          "text": "5.2.0",
          "name": "since"
        }
      ],
      "methods": [],
      "properties": [
        {
          "name": "type",
          "tags": [
            {
              "text": "5.2.0",
              "name": "since"
            }
          ],
          "docs": "The type of the constraint.",
          "complexTypes": [],
          "type": "'limit' | 'limitToLast'"
        },
        {
          "name": "limit",
          "tags": [
            {
              "text": "5.2.0",
              "name": "since"
            }
          ],
          "docs": "The maximum number of items to return.",
          "complexTypes": [],
          "type": "number"
        }
      ]
    },
    {
      "name": "QueryStartAtConstraint",
      "slug": "querystartatconstraint",
      "docs": "",
      "tags": [
        {
          "text": "5.2.0",
          "name": "since"
        }
      ],
      "methods": [],
      "properties": [
        {
          "name": "type",
          "tags": [
            {
              "text": "5.2.0",
              "name": "since"
            }
          ],
          "docs": "The type of the constraint.",
          "complexTypes": [],
          "type": "'startAt' | 'startAfter'"
        },
        {
          "name": "reference",
          "tags": [
            {
              "text": "5.2.0",
              "name": "since"
            },
            {
              "text": "'users/Aorq09lkt1ynbR7xhTUx'",
              "name": "example"
            }
          ],
          "docs": "The reference to start at or after as a string, with path components separated by a forward slash (`/`).\n\n**Attention**: This requires an additional document read.",
          "complexTypes": [],
          "type": "string"
        }
      ]
    },
    {
      "name": "QueryEndAtConstraint",
      "slug": "queryendatconstraint",
      "docs": "",
      "tags": [
        {
          "text": "5.2.0",
          "name": "since"
        }
      ],
      "methods": [],
      "properties": [
        {
          "name": "type",
          "tags": [
            {
              "text": "5.2.0",
              "name": "since"
            }
          ],
          "docs": "The type of the constraint.",
          "complexTypes": [],
          "type": "'endAt' | 'endBefore'"
        },
        {
          "name": "reference",
          "tags": [
            {
              "text": "5.2.0",
              "name": "since"
            },
            {
              "text": "'users/Aorq09lkt1ynbR7xhTUx'",
              "name": "example"
            }
          ],
          "docs": "The reference as to end at or before as a string, with path components separated by a forward slash (`/`).\n\n**Attention**: This requires an additional document read.",
          "complexTypes": [],
          "type": "string"
        }
      ]
    },
    {
      "name": "GetCollectionGroupResult",
      "slug": "getcollectiongroupresult",
      "docs": "",
      "tags": [
        {
          "text": "5.2.0",
          "name": "since"
        }
      ],
      "methods": [],
      "properties": [
        {
          "name": "snapshots",
          "tags": [
            {
              "text": "5.2.0",
              "name": "since"
            }
          ],
          "docs": "The documents in the collection.",
          "complexTypes": [
            "DocumentSnapshot",
            "T"
          ],
          "type": "DocumentSnapshot<T>[]"
        }
      ]
    },
    {
      "name": "GetCollectionGroupOptions",
      "slug": "getcollectiongroupoptions",
      "docs": "",
      "tags": [
        {
          "text": "5.2.0",
          "name": "since"
        }
      ],
      "methods": [],
      "properties": [
        {
          "name": "reference",
          "tags": [
            {
              "text": "5.2.0",
              "name": "since"
            }
          ],
          "docs": "The reference as a string, with path components separated by a forward slash (`/`).",
          "complexTypes": [],
          "type": "string"
        },
        {
          "name": "compositeFilter",
          "tags": [
            {
              "text": "5.2.0",
              "name": "since"
            }
          ],
          "docs": "The filter to apply.",
          "complexTypes": [
            "QueryCompositeFilterConstraint"
          ],
          "type": "QueryCompositeFilterConstraint"
        },
        {
          "name": "queryConstraints",
          "tags": [
            {
              "text": "5.2.0",
              "name": "since"
            }
          ],
          "docs": "Narrow or order the set of documents to retrieve, but do not explicitly filter for document fields.",
          "complexTypes": [
            "QueryNonFilterConstraint"
          ],
          "type": "QueryNonFilterConstraint[] | undefined"
        }
      ]
    },
    {
      "name": "GetCountFromServerResult",
      "slug": "getcountfromserverresult",
      "docs": "",
      "tags": [
        {
          "text": "6.4.0",
          "name": "since"
        }
      ],
      "methods": [],
      "properties": [
        {
          "name": "count",
          "tags": [
            {
              "text": "6.4.0",
              "name": "since"
            }
          ],
          "docs": "The number of documents in the collection.",
          "complexTypes": [],
          "type": "number"
        }
      ]
    },
    {
      "name": "GetCountFromServerOptions",
      "slug": "getcountfromserveroptions",
      "docs": "",
      "tags": [
        {
          "text": "6.4.0",
          "name": "since"
        }
      ],
      "methods": [],
      "properties": [
        {
          "name": "reference",
          "tags": [
            {
              "text": "6.4.0",
              "name": "since"
            }
          ],
          "docs": "The reference as a string, with path components separated by a forward slash (`/`).",
          "complexTypes": [],
          "type": "string"
        }
      ]
    },
    {
      "name": "UseEmulatorOptions",
      "slug": "useemulatoroptions",
      "docs": "",
      "tags": [
        {
          "text": "6.1.0",
          "name": "since"
        }
      ],
      "methods": [],
      "properties": [
        {
          "name": "host",
          "tags": [
            {
              "text": "6.1.0",
              "name": "since"
            },
            {
              "text": "\"127.0.0.1\"",
              "name": "example"
            }
          ],
          "docs": "The emulator host without any port or scheme.\n\nNote when using a Android Emulator device: 10.0.2.2 is the special IP address to connect to the 'localhost' of the host computer.",
          "complexTypes": [],
          "type": "string"
        },
        {
          "name": "port",
          "tags": [
            {
              "text": "6.1.0",
              "name": "since"
            },
            {
              "text": "8080",
              "name": "default"
            },
            {
              "text": "8080",
              "name": "example"
            }
          ],
          "docs": "The emulator port.",
          "complexTypes": [],
          "type": "number | undefined"
        }
      ]
    },
    {
      "name": "AddDocumentSnapshotListenerOptions",
      "slug": "adddocumentsnapshotlisteneroptions",
      "docs": "",
      "tags": [
        {
          "text": "5.2.0",
          "name": "since"
        }
      ],
      "methods": [],
      "properties": [
        {
          "name": "reference",
          "tags": [
            {
              "text": "5.2.0",
              "name": "since"
            }
          ],
          "docs": "The reference as a string, with path components separated by a forward slash (`/`).",
          "complexTypes": [],
          "type": "string"
        }
      ]
    },
    {
      "name": "AddCollectionSnapshotListenerOptions",
      "slug": "addcollectionsnapshotlisteneroptions",
      "docs": "",
      "tags": [
        {
          "text": "5.2.0",
          "name": "since"
        }
      ],
      "methods": [],
      "properties": [
        {
          "name": "reference",
          "tags": [
            {
              "text": "5.2.0",
              "name": "since"
            }
          ],
          "docs": "The reference as a string, with path components separated by a forward slash (`/`).",
          "complexTypes": [],
          "type": "string"
        },
        {
          "name": "compositeFilter",
          "tags": [
            {
              "text": "5.2.0",
              "name": "since"
            }
          ],
          "docs": "The filter to apply.",
          "complexTypes": [
            "QueryCompositeFilterConstraint"
          ],
          "type": "QueryCompositeFilterConstraint"
        },
        {
          "name": "queryConstraints",
          "tags": [
            {
              "text": "5.2.0",
              "name": "since"
            }
          ],
          "docs": "Narrow or order the set of documents to retrieve, but do not explicitly filter for document fields.",
          "complexTypes": [
            "QueryNonFilterConstraint"
          ],
          "type": "QueryNonFilterConstraint[] | undefined"
        }
      ]
    },
    {
      "name": "AddCollectionGroupSnapshotListenerOptions",
      "slug": "addcollectiongroupsnapshotlisteneroptions",
      "docs": "",
      "tags": [
        {
          "text": "6.1.0",
          "name": "since"
        }
      ],
      "methods": [],
      "properties": [
        {
          "name": "reference",
          "tags": [
            {
              "text": "6.1.0",
              "name": "since"
            }
          ],
          "docs": "The reference as a string, with path components separated by a forward slash (`/`).",
          "complexTypes": [],
          "type": "string"
        },
        {
          "name": "compositeFilter",
          "tags": [
            {
              "text": "6.1.0",
              "name": "since"
            }
          ],
          "docs": "The filter to apply.",
          "complexTypes": [
            "QueryCompositeFilterConstraint"
          ],
          "type": "QueryCompositeFilterConstraint"
        },
        {
          "name": "queryConstraints",
          "tags": [
            {
              "text": "6.1.0",
              "name": "since"
            }
          ],
          "docs": "Narrow or order the set of documents to retrieve, but do not explicitly filter for document fields.",
          "complexTypes": [
            "QueryNonFilterConstraint"
          ],
          "type": "QueryNonFilterConstraint[] | undefined"
        }
      ]
    },
    {
      "name": "RemoveSnapshotListenerOptions",
      "slug": "removesnapshotlisteneroptions",
      "docs": "",
      "tags": [
        {
          "text": "5.2.0",
          "name": "since"
        }
      ],
      "methods": [],
      "properties": [
        {
          "name": "callbackId",
          "tags": [
            {
              "text": "5.2.0",
              "name": "since"
            }
          ],
          "docs": "",
          "complexTypes": [
            "CallbackId"
          ],
          "type": "CallbackId"
        }
      ]
    }
  ],
  "enums": [],
  "typeAliases": [
    {
      "name": "SetOptions",
      "slug": "setoptions",
      "docs": "An options object that configures the behavior of {@link @firebase/firestore/lite#(setDoc:1)}, {@link",
      "types": [
        {
          "text": "{\n    readonly merge?: boolean;\n}",
          "complexTypes": []
        },
        {
          "text": "{\n    readonly mergeFields?: Array<string | FieldPath>;\n}",
          "complexTypes": [
            "Array",
            "FieldPath"
          ]
        }
      ]
    },
    {
      "name": "QueryFilterConstraint",
      "slug": "queryfilterconstraint",
      "docs": "",
      "types": [
        {
          "text": "QueryFieldFilterConstraint",
          "complexTypes": [
            "QueryFieldFilterConstraint"
          ]
        },
        {
          "text": "QueryCompositeFilterConstraint",
          "complexTypes": [
            "QueryCompositeFilterConstraint"
          ]
        }
      ]
    },
    {
      "name": "QueryOperator",
      "slug": "queryoperator",
      "docs": "",
      "types": [
        {
          "text": "'<'",
          "complexTypes": []
        },
        {
          "text": "'<='",
          "complexTypes": []
        },
        {
          "text": "'=='",
          "complexTypes": []
        },
        {
          "text": "'>='",
          "complexTypes": []
        },
        {
          "text": "'>'",
          "complexTypes": []
        },
        {
          "text": "'!='",
          "complexTypes": []
        },
        {
          "text": "'array-contains'",
          "complexTypes": []
        },
        {
          "text": "'array-contains-any'",
          "complexTypes": []
        },
        {
          "text": "'in'",
          "complexTypes": []
        },
        {
          "text": "'not-in'",
          "complexTypes": []
        }
      ]
    },
    {
      "name": "QueryNonFilterConstraint",
      "slug": "querynonfilterconstraint",
      "docs": "",
      "types": [
        {
          "text": "QueryOrderByConstraint",
          "complexTypes": [
            "QueryOrderByConstraint"
          ]
        },
        {
          "text": "QueryLimitConstraint",
          "complexTypes": [
            "QueryLimitConstraint"
          ]
        },
        {
          "text": "QueryStartAtConstraint",
          "complexTypes": [
            "QueryStartAtConstraint"
          ]
        },
        {
          "text": "QueryEndAtConstraint",
          "complexTypes": [
            "QueryEndAtConstraint"
          ]
        }
      ]
    },
    {
      "name": "OrderByDirection",
      "slug": "orderbydirection",
      "docs": "",
      "types": [
        {
          "text": "'desc'",
          "complexTypes": []
        },
        {
          "text": "'asc'",
          "complexTypes": []
        }
      ]
    },
    {
      "name": "AddDocumentSnapshotListenerCallback",
      "slug": "adddocumentsnapshotlistenercallback",
      "docs": "",
      "types": [
        {
          "text": "(event: AddDocumentSnapshotListenerCallbackEvent<T> | null, error: any): void",
          "complexTypes": [
            "AddDocumentSnapshotListenerCallbackEvent",
            "T"
          ]
        }
      ]
    },
    {
      "name": "AddDocumentSnapshotListenerCallbackEvent",
      "slug": "adddocumentsnapshotlistenercallbackevent",
      "docs": "",
      "types": [
        {
          "text": "GetDocumentResult<T>",
          "complexTypes": [
            "GetDocumentResult",
            "T"
          ]
        }
      ]
    },
    {
      "name": "CallbackId",
      "slug": "callbackid",
      "docs": "",
      "types": [
        {
          "text": "string",
          "complexTypes": []
        }
      ]
    },
    {
      "name": "AddCollectionSnapshotListenerCallback",
      "slug": "addcollectionsnapshotlistenercallback",
      "docs": "",
      "types": [
        {
          "text": "(event: AddCollectionSnapshotListenerCallbackEvent<T> | null, error: any): void",
          "complexTypes": [
            "AddCollectionSnapshotListenerCallbackEvent",
            "T"
          ]
        }
      ]
    },
    {
      "name": "AddCollectionSnapshotListenerCallbackEvent",
      "slug": "addcollectionsnapshotlistenercallbackevent",
      "docs": "",
      "types": [
        {
          "text": "GetCollectionResult<T>",
          "complexTypes": [
            "GetCollectionResult",
            "T"
          ]
        }
      ]
    },
    {
      "name": "AddCollectionGroupSnapshotListenerCallback",
      "slug": "addcollectiongroupsnapshotlistenercallback",
      "docs": "",
      "types": [
        {
          "text": "(event: AddCollectionGroupSnapshotListenerCallbackEvent<T> | null, error: any): void",
          "complexTypes": [
            "AddCollectionGroupSnapshotListenerCallbackEvent",
            "T"
          ]
        }
      ]
    },
    {
      "name": "AddCollectionGroupSnapshotListenerCallbackEvent",
      "slug": "addcollectiongroupsnapshotlistenercallbackevent",
      "docs": "",
      "types": [
        {
          "text": "GetCollectionGroupResult<T>",
          "complexTypes": [
            "GetCollectionGroupResult",
            "T"
          ]
        }
      ]
    }
  ],
  "pluginConfigs": []
}